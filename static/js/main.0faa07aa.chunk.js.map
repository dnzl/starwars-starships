{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getData","page","fetch","then","r","json","data","setState","items","results","loaded","currentPage","totalPages","Math","ceil","count","renderHyperdriveBar","value","isUnknown","w","parseFloat","react_default","a","createElement","className","style","width","state","_this2","map","item","i","key","name","parseInt","crew","passengers","hyperdrive_rating","disabled","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAsEeA,qBAjEb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAaRQ,QAAQ,SAAAC,GACNC,MAAM,wCAAwCD,GAAME,KAAK,SAAAC,GAAC,OAAEA,EAAEC,SAAQF,KAAK,SAAAG,GACzEb,EAAKc,SAAS,CACZC,MAAOF,EAAKG,QACZC,QAAQ,EACRC,YAAaV,EACbW,WAAYC,KAAKC,KAAKR,EAAKS,MAAM,SApBrBtB,EAyBlBuB,oBAAoB,SAAAC,GAClB,IAAMC,EAAoB,YAARD,EACZE,EAAID,EAAY,EAAsB,IAAlBE,WAAWH,GAAW,EAChD,OACEI,EAAAC,EAAAC,cAAA,QAAMC,UAAW,gBAAgBN,EAAU,YAAY,KACrDG,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAACC,MAAMP,EAAE,SA5B1B1B,EAAKkC,MAAQ,CACXnB,MAAO,GACPE,QAAQ,EACRC,YAAa,EACbC,WAAY,GANEnB,mFAWhBG,KAAKI,QAAQ,oCAwBP,IAAA4B,EAAAhC,KACN,IAAIA,KAAK+B,MAAMjB,OAAS,OAAOW,EAAAC,EAAAC,cAAA,yBADzB,IAGEZ,EAAgBf,KAAK+B,MAArBhB,YAER,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEX5B,KAAK+B,MAAMnB,MAAMqB,IAAK,SAACC,EAAMC,GAAP,OACpBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOQ,IAAKD,GACzBV,EAAAC,EAAAC,cAAA,kBAASF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAgBM,EAAKG,OAC9CZ,EAAAC,EAAAC,cAAA,kBAAmC,IAAxBW,SAASJ,EAAKK,MAAc,OAASL,EAAKK,MACrDd,EAAAC,EAAAC,cAAA,wBAA+C,IAA9BW,SAASJ,EAAKM,YAAoB,OAASN,EAAKM,YACjEf,EAAAC,EAAAC,cAAA,8BAAuBK,EAAKZ,oBAAoBc,EAAKO,wBAK7DhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUc,SAAwB,IAAd3B,EAAiB4B,QAAS,kBAAIX,EAAK5B,QAAQW,EAAY,KAA7F,YACAU,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUc,SAAU3B,IAAcf,KAAK+B,MAAMf,WAAY2B,QAAS,kBAAIX,EAAK5B,QAAQW,EAAY,KAAjH,kBA3DM6B,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC","file":"static/js/main.0faa07aa.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      items: [],\n      loaded: false,\n      currentPage: 1,\n      totalPages: 1,\n    }\n  }\n\n  componentDidMount(){\n    this.getData(1);\n  }\n\n  getData=page=>{\n    fetch(\"https://swapi.co/api/starships/?page=\"+page).then(r=>r.json()).then(data=>{\n      this.setState({\n        items: data.results,\n        loaded: true,\n        currentPage: page,\n        totalPages: Math.ceil(data.count/10),\n      })\n    })\n  }\n\n  renderHyperdriveBar=value=>{\n    const isUnknown = value===\"unknown\";\n    const w = isUnknown ? 0 : parseFloat(value)*100/5; //I used 5 as 100% as required, but there are at least one ship with Hyperdrive rating bigger than 5\n    return (\n      <span className={\"progress-bar\"+(isUnknown?\" disabled\":\"\")}>\n        <span style={{width:w+\"%\"}}/>\n      </span>\n    )\n  }\n\n  render(){\n    if(!this.state.loaded){ return <div>loading...</div>; }\n\n    const { currentPage } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"content\">\n          {\n            this.state.items.map( (item, i) => (\n              <div className=\"item\" key={i}>\n                <p>Name: <span className=\"capitalized\">{ item.name }</span></p>\n                <p>Crew: { parseInt(item.crew) === 0 ? \"None\" : item.crew }</p>\n                <p>Passengers: { parseInt(item.passengers) === 0 ? \"None\" : item.passengers }</p>\n                <p>Hyperdrive Class: { this.renderHyperdriveBar(item.hyperdrive_rating)}</p>\n              </div>\n            ))\n          }\n        </div>\n        <div className=\"footer\">\n          <div className=\"pagination\">\n            <button className=\"btn prv\" disabled={currentPage===1} onClick={()=>this.getData(currentPage-1)}>Previous</button>\n            <button className=\"btn nxt\" disabled={currentPage===this.state.totalPages} onClick={()=>this.getData(currentPage+1)}>Next</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}